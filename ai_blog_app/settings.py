"""
Django settings for ai_blog_app project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')

# Debug: Print if .env file exists and some key info
env_file_path = BASE_DIR / '.env'
print(f"üîç Looking for .env file at: {env_file_path}")
print(f"üìÅ .env file exists: {env_file_path.exists()}")
if env_file_path.exists():
    with open(env_file_path, 'r') as f:
        content = f.read()
        print(f"üìù .env file has {len(content.splitlines())} lines")
        # Check if keys are present (without showing values)
        has_gemini = 'GEMINI_API_KEY' in content
        has_assembly = 'ASSEMBLYAI_API_KEY' in content
        print(f"üîë GEMINI_API_KEY in file: {has_gemini}")
        print(f"üîë ASSEMBLYAI_API_KEY in file: {has_assembly}")

# Debug: Check what environment variables are loaded
gemini_key = os.getenv("GEMINI_API_KEY")
assembly_key = os.getenv("ASSEMBLYAI_API_KEY")
print(f"üåç GEMINI_API_KEY loaded: {'‚úÖ Yes' if gemini_key else '‚ùå No'}")
print(f"üåç ASSEMBLYAI_API_KEY loaded: {'‚úÖ Yes' if assembly_key else '‚ùå No'}")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-pcc4vv9-m5y#n*)zcky(xkh9ti=2_h_o+6eyty^eg2qr6&!1%7')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() in ('true', '1', 'yes', 'on')

# Build ALLOWED_HOSTS list
ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'ai-blog-generator.up.railway.app']
if os.getenv('ALLOWED_HOSTS'):
    ALLOWED_HOSTS.extend([host.strip() for host in os.getenv('ALLOWED_HOSTS').split(',') if host.strip()])

# Build CSRF_TRUSTED_ORIGINS list
CSRF_TRUSTED_ORIGINS = [
    "https://ai-blog-generator.up.railway.app",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]
if os.getenv('CSRF_TRUSTED_ORIGINS'):
    CSRF_TRUSTED_ORIGINS.extend([origin.strip() for origin in os.getenv('CSRF_TRUSTED_ORIGINS').split(',') if origin.strip()])

# API Keys
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
ASSEMBLYAI_API_KEY = os.getenv("ASSEMBLYAI_API_KEY")

# Temporary debugging - comment out the strict requirements
print(f"üîß DEBUG MODE: {DEBUG}")
print(f"üîë GEMINI_API_KEY: {'‚úÖ Set' if GEMINI_API_KEY else '‚ùå Missing'}")
print(f"üîë ASSEMBLYAI_API_KEY: {'‚úÖ Set' if ASSEMBLYAI_API_KEY else '‚ùå Missing'}")

# Only require API keys in production or when DEBUG is False
# TEMPORARILY DISABLED FOR DEBUGGING
# if not DEBUG:
#     if not GEMINI_API_KEY:
#         raise ValueError("GEMINI_API_KEY environment variable is required in production")
#     if not ASSEMBLYAI_API_KEY:
#         raise ValueError("ASSEMBLYAI_API_KEY environment variable is required in production")
# else:
#     # In development, warn if API keys are missing but don't crash
if not GEMINI_API_KEY:
    print("‚ö†Ô∏è  WARNING: GEMINI_API_KEY not set. Blog generation will fail.")
if not ASSEMBLYAI_API_KEY:
    print("‚ö†Ô∏è  WARNING: ASSEMBLYAI_API_KEY not set. Transcription will fail.")

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog_generator',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # For static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ai_blog_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Fixed path joining
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ai_blog_app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use environment variables with fallbacks
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('PGNAME', 'railway'),
        'USER': os.getenv('PGUSER', 'postgres'),
        'PASSWORD': os.getenv('PGPASSWORD', 'oVfFCEUOEQMQlyLiHhwaHYZwXdLzpePR'),
        'HOST': os.getenv('PGHOST', 'mainline.proxy.rlwy.net'),
        'PORT': os.getenv('PGPORT', '23053'),
        'OPTIONS': {
            'sslmode': 'require',
        },
        'CONN_MAX_AGE': 60,  # Connection pooling
        'CONN_HEALTH_CHECKS': True,
    }
}

# Alternative: Use DATABASE_URL if provided (Railway/Heroku style)
DATABASE_URL = os.getenv('DATABASE_URL')
if DATABASE_URL:
    DATABASES['default'] = dj_database_url.parse(DATABASE_URL)

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'ai_blog_app.backend.EmailBackend',  # Make sure this exists
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# WhiteNoise configuration for serving static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Login/Logout URLs
LOGIN_URL = 'user_login'
LOGIN_REDIRECT_URL = 'index'
LOGOUT_REDIRECT_URL = 'user_login'

# External tool paths
FFMPEG_PATH = os.getenv('FFMPEG_PATH', '/opt/homebrew/bin/ffmpeg')

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB

# Session configuration
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_COOKIE_SECURE = not DEBUG  # Only send cookies over HTTPS in production
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# CSRF configuration
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'

# Security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'ai_blog_app.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'blog_generator': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

# Cache configuration (optional - for better performance)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5 minutes
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# Email configuration (for password reset, etc.)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development

# In production, use a real email backend:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = os.getenv('EMAIL_HOST')
# EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
# DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@yourdomain.com')

# YouTube-dl/yt-dlp configuration
YT_DLP_OPTIONS = {
    'format': 'bestaudio/best',
    'quiet': True,
    'no_warnings': True,
    'extractaudio': True,
    'audioformat': 'mp3',
    'audioquality': '192',
}

# Blog generation settings
MAX_TRANSCRIPT_LENGTH = 50000  # Characters
MAX_BLOG_LENGTH = 10000  # Characters
BLOG_GENERATION_TIMEOUT = 300  # Seconds (5 minutes)

# Rate limiting (if you implement it)
RATELIMIT_ENABLE = True
RATELIMIT_VIEW = 'blog_generator.views.ratelimited'